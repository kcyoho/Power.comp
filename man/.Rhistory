power.comp <- function(dist, n_sims = 25L, effect, sd = 10, alpha = 0.05, print = FALSE){
#some error messages for input
if (n_sims <= 0) { stop("Input must be greater than 0")}
if (!is.integer(n_sims)) {stop("Input must be an integer")}
if (!is.numeric(effect)) {stop("Input must be numeric")}
power <- as.data.frame (matrix(0, nrow = length(effect), ncol =3)) #creates an empty matrix to store power info
colnames(power) <- c("Effect size", "ANOVA power", "Friedman's power")
for (sims in 1:n_sims) {# the "sims" loop repeats the data generation and testing process for each sample size n_sims number of times
count = 0 #used in the i loop -- put inside sims loop so that count will reset after each iteration of the i loop
for(i in seq_along(effect)){ #the "i" loop will run through all provided effect sizes one time, tracking whether or not the tests rejected the null
count <- count + 1 # tracks which element of the effect object the loop is running -- passed along to track the row in the dataframe "power"
X <- data_type(type = dist, effect = i, SD = sd)
fa.comp <- fried.anov.comp(X, alpha)
power[count,1] <- effect[count] # assigns effect size to column 1
power[count,2] <- if (fa.comp[3,1] == "REJECT"){power[count,2]+1} else {power[count,2]+0} #counts ANOVA rejections
power[count,3] <- if (fa.comp[3,2] == "REJECT"){power[count,3] +1} else {power[count,3]+0} #counts Friedman rejections
}
}
power[, 2:3] <- power[, 2:3]/n_sims #averages power for each sample size across simulations
power =  pivot_longer(data = power, !`Effect size`,
names_to = "Test", values_to = "power") #adjusts the data frame to be tidy--better for ggplot
#graphs data
power_plot = ggplot(data = power, aes(x=`Effect size`, y= `power`, group = `Test`))+
geom_smooth(se = FALSE, aes(color=`Test`))+
theme_cowplot(font_size = 10)+
labs(title = "Comparison of Power between ANOVA and Friedman's Tests")
if (print = TRUE) {return(power)}
power.comp <- function(dist, n_sims = 25L, effect, sd = 10, alpha = 0.05, print.power = FALSE){
#some error messages for input
if (n_sims <= 0) { stop("Input must be greater than 0")}
if (!is.integer(n_sims)) {stop("Input must be an integer")}
if (!is.numeric(effect)) {stop("Input must be numeric")}
power <- as.data.frame (matrix(0, nrow = length(effect), ncol =3)) #creates an empty matrix to store power info
colnames(power) <- c("Effect size", "ANOVA power", "Friedman's power")
for (sims in 1:n_sims) {# the "sims" loop repeats the data generation and testing process for each sample size n_sims number of times
count = 0 #used in the i loop -- put inside sims loop so that count will reset after each iteration of the i loop
for(i in seq_along(effect)){ #the "i" loop will run through all provided effect sizes one time, tracking whether or not the tests rejected the null
count <- count + 1 # tracks which element of the effect object the loop is running -- passed along to track the row in the dataframe "power"
X <- data_type(type = dist, effect = i, SD = sd)
fa.comp <- fried.anov.comp(X, alpha)
power[count,1] <- effect[count] # assigns effect size to column 1
power[count,2] <- if (fa.comp[3,1] == "REJECT"){power[count,2]+1} else {power[count,2]+0} #counts ANOVA rejections
power[count,3] <- if (fa.comp[3,2] == "REJECT"){power[count,3] +1} else {power[count,3]+0} #counts Friedman rejections
}
}
power[, 2:3] <- power[, 2:3]/n_sims #averages power for each sample size across simulations
power =  pivot_longer(data = power, !`Effect size`,
names_to = "Test", values_to = "power") #adjusts the data frame to be tidy--better for ggplot
#graphs data
power_plot = ggplot(data = power, aes(x=`Effect size`, y= `power`, group = `Test`))+
geom_smooth(se = FALSE, aes(color=`Test`))+
theme_cowplot(font_size = 10)+
labs(title = "Comparison of Power between ANOVA and Friedman's Tests")
if (print.power = TRUE) {return(power)}
power.comp <- function(dist, n_sims = 25L, effect, sd = 10, alpha = 0.05, print.power = FALSE){
#some error messages for input
if (n_sims <= 0) { stop("Input must be greater than 0")}
if (!is.integer(n_sims)) {stop("Input must be an integer")}
if (!is.numeric(effect)) {stop("Input must be numeric")}
power <- as.data.frame (matrix(0, nrow = length(effect), ncol =3)) #creates an empty matrix to store power info
colnames(power) <- c("Effect size", "ANOVA power", "Friedman's power")
for (sims in 1:n_sims) {# the "sims" loop repeats the data generation and testing process for each sample size n_sims number of times
count = 0 #used in the i loop -- put inside sims loop so that count will reset after each iteration of the i loop
for(i in seq_along(effect)){ #the "i" loop will run through all provided effect sizes one time, tracking whether or not the tests rejected the null
count <- count + 1 # tracks which element of the effect object the loop is running -- passed along to track the row in the dataframe "power"
X <- data_type(type = dist, effect = i, SD = sd)
fa.comp <- fried.anov.comp(X, alpha)
power[count,1] <- effect[count] # assigns effect size to column 1
power[count,2] <- if (fa.comp[3,1] == "REJECT"){power[count,2]+1} else {power[count,2]+0} #counts ANOVA rejections
power[count,3] <- if (fa.comp[3,2] == "REJECT"){power[count,3] +1} else {power[count,3]+0} #counts Friedman rejections
}
}
power[, 2:3] <- power[, 2:3]/n_sims #averages power for each sample size across simulations
power =  pivot_longer(data = power, !`Effect size`,
names_to = "Test", values_to = "power") #adjusts the data frame to be tidy--better for ggplot
#graphs data
power_plot = ggplot(data = power, aes(x=`Effect size`, y= `power`, group = `Test`))+
geom_smooth(se = FALSE, aes(color=`Test`))+
theme_cowplot(font_size = 10)+
labs(title = "Comparison of Power between ANOVA and Friedman's Tests")
if (print.power == TRUE) {return(power)}
else {return(power_plot)}
}
power.comp("normal", effect = seq(1:10), print.power = TRUE)
data_type <- function(type, effect, N=4, Mean1= NULL, Mean2= NULL, Mean3= NULL,
SD = 1){
if (is.null(Mean1)){
Mean1 = effect
Mean2= 0
Mean3=-effect}
if(type == "normal"){
group1 = rnorm(n= N, mean= Mean1, sd = SD)
group2 = rnorm(n= N, mean= Mean2, sd = SD)
group3 = rnorm(n= N, mean= Mean3, sd = SD)}
else if(type == "cauchy"){
group1 = rcauchy(n= N, location = Mean1, scale = SD)
group2 = rcauchy(n= N, location = Mean2, scale = SD)
group3 = rcauchy(n= N, location = Mean3, scale = SD)}
else if(type == "gumbel"){
group1 = rgumbel(n= N, loc = Mean1, scale = SD)
group2 = rgumbel(n= N, loc = Mean2, scale = SD)
group3 = rgumbel(n= N, loc = Mean3, scale = SD)}
X = matrix(c(group1, group2, group3),
nrow=N,
byrow = FALSE,
dimnames = list(1:N,
c("Trt1","Trt2","Trt3")))
df <-data.frame(response = c(X[,1], X[,2], X[,3]), treatment = factor(c(rep("trt1", times = N),
rep("trt2", times = N),
rep("trt3", times = N))),
block = factor(rep(1:N)))
return(df)
}
fried.anov.comp <- function(X, alpha = 0.05) {
#some error messages for input
if (alpha < 0) { stop("Input must be positive")}
if (!is.numeric(alpha)) { stop("Input must be numeric")}
#runs the tests
fried <-friedman.test(formula = response ~ treatment| block, data = X)
anov <-anova(lm(response ~ block + treatment, data = X))
#creates a matrix filled with results for return
results <- matrix(nrow= 3, ncol=2,
c(anov[2,4], anov[2,5],  if (anov[2,5] < alpha){"REJECT"} else {"FAIL TO REJECT"},
fried$statistic, fried$p.value, if (fried$p.value < alpha){"REJECT"} else {"FAIL TO REJECT"}))
colnames(results) <- c("ANOVA", "Friedman's")
rownames(results)<- c("statistic", "p-value", "Conclusion")
return(results)
}
power.comp("normal", effect = seq(1:10), print.power = TRUE)
library(tidyr)
library(ggplot2)
library(cowplot)
power.comp("normal", effect = seq(1:10), print.power = TRUE)
power.comp <- function(dist, n_sims = 25L, effect, sd = 10, alpha = 0.05, print.power = FALSE){
power.comp("normal", effect = seq(1:10), print.power = TRUE)
power.comp <- function(dist, n_sims = 25L, effect, sd = 10, alpha = 0.05, print.power = FALSE){
power.comp("normal", effect = seq(1:10), print.power = FALSE)
